# Default values for pgadmin.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# Deployment strategy - use Recreate for stateful applications like pgAdmin
# This ensures the old pod is terminated before the new one starts
deploymentStrategy:
  type: Recreate

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: dpage/pgadmin4
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# pgAdmin specific configuration
pgadmin:
  # Default admin email (required)
  defaultEmail: "admin@example.com"
  # Default admin password (required) - will be stored in a secret
  defaultPassword: "SuperSecret"
  # Enable TLS (if true, container will listen on port 443)
  enableTLS: false
  # Listen address
  listenAddress: "0.0.0.0"
  # Custom listen port (leave empty to use pgAdmin defaults: 80 for HTTP, 443 for HTTPS)
  listenPort: 80
  # Disable Postfix mail server
  disablePostfix: true
  # Server configuration file
  serverJsonFile: "/pgadmin4/servers.json"
  # Replace servers on startup
  replaceServersOnStartup: false
  # Preferences configuration file
  preferencesJsonFile: "/pgadmin4/preferences.json"
  # Configuration environment variables (PGADMIN_CONFIG_* prefix will be added)
  config: {}
    # ENHANCED_COOKIE_PROTECTION: "True"
    # LOGIN_BANNER: "Authorised users only!"
    # CONSOLE_LOG_LEVEL: "10"
  # Gunicorn settings
  gunicorn:
    accessLogFile: "-"
    limitRequestLine: 8190
    threads: 25
    timeout: 120

# Persistence configuration
persistence:
  enabled: true
  # Use existing PVC
  existingClaim: ""
  # Storage class
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 5Gi
  # Annotations for PVC
  annotations: {}

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# Security context for the pod
podSecurityContext:
  fsGroup: 5050
  # Allow the container to change ownership of mounted volumes
  fsGroupChangePolicy: "OnRootMismatch"

# Security context for the container
# Note: pgAdmin container needs flexibility during startup for proper initialization
securityContext:
  # Allow running as root initially - pgAdmin will manage user context internally
  runAsNonRoot: false
  # Allow privilege escalation for proper container initialization
  allowPrivilegeEscalation: true
  capabilities:
    drop:
    - NET_RAW
    - SYS_CHROOT
    - MKNOD
    - AUDIT_WRITE
    - KILL
  readOnlyRootFilesystem: false

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  targetPort: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  createMiddleware: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    # nginx.ingress.kubernetes.io/proxy-set-header-X-Script-Name: ""
    # nginx.ingress.kubernetes.io/proxy-set-header-X-Scheme: "$scheme"
  hosts:
    - host: pgadmin.example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: pgadmin-tls
  #    hosts:
  #      - pgadmin.example.local

# Resource limits and requests
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /misc/ping
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /misc/ping
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /misc/ping
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 12

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: servers-config
#   configMap:
#     name: pgadmin-servers-config
# - name: preferences-config
#   configMap:
#     name: pgadmin-preferences-config

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: servers-config
#   mountPath: "/pgadmin4/servers.json"
#   subPath: "servers.json"
#   readOnly: true
# - name: preferences-config
#   mountPath: "/pgadmin4/preferences.json"
#   subPath: "preferences.json"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
